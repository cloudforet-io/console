name: "[Pull Request] Review State Labeler"

permissions:
  issues: write
  pull-requests: write

on:
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request_target:
    types: [synchronize, reopened, opened]

jobs:
  update-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR information
        id: pr_info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get current labels
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner,
              repo,
              issue_number: prNumber
            });
            
            const hasSelfApprovedReview = currentLabels.some(label => label.name === 'self_approved/review');
            
            // Check reviewers only for pull_request_target event
            const hasReviewers = github.event_name === 'pull_request_target' ? 
              (context.payload.pull_request.requested_reviewers && 
               context.payload.pull_request.requested_reviewers.length > 0) : false;
            
            core.setOutput('hasSelfApprovedReview', hasSelfApprovedReview);
            core.setOutput('hasReviewers', hasReviewers);

      - name: Add pending review label on PR creation or update
        if: |
          github.event_name == 'pull_request_target' && 
          steps.pr_info.outputs.hasSelfApprovedReview == 'false' && 
          steps.pr_info.outputs.hasReviewers == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Double check if the PR has self approved review label
            const hasSelfApprovedReview = context.payload.pull_request.labels.some(label => label.name === 'self_approved/review');
            if(hasSelfApprovedReview) {
              return;
            }

            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: prNumber,
              labels: ['pending/review']
            });

      - name: Update labels based on review state
        if: |
          github.event_name == 'pull_request_review' && 
          steps.pr_info.outputs.hasSelfApprovedReview == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const reviewState = context.payload.review.state
            console.log('reviewState', reviewState)
            
            if (reviewState === 'approved' || reviewState === 'changes_requested') {
              // Labels to remove based on review state
              const labelsToRemove = ['pending/review']
              if (reviewState === 'approved') labelsToRemove.push('changes_requested/review')
              else if (reviewState === 'changes_requested') labelsToRemove.push('approved/review')

              // Remove each label individually
              for (const label of labelsToRemove) {
                try {
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: prNumber,
                    name: label
                  });
                } catch (error) {
                  if (error.status === 404) {
                    console.log(`Label ${label} not found, skipping removal`);
                  } else {
                    throw error;
                  }
                }
              }

              // Add new review state label
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: [reviewState + '/review']
              });
            }







              
