name: "[Pull Request] Pick Random Reviwer"

on:
  issue_comment:
    types: [created]
  pull_request_target:
      types: 
        - opened
  workflow_dispatch:

jobs:
  pick-random-reviwer:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/review-request')) ||
      (github.event_name == 'pull_request_target' && (github.base_ref == 'master' || github.base_ref == 'develop') && !contains(github.event.pull_request.body, '- [x] Previously reviewed in feature branch, no further review needed'))
    
    runs-on: ubuntu-latest
    
    env:
      GROUP1: '["WANZARGEN", "sulmoJ", "skdud4659", "piggggggggy"]'
      GROUP2: '["kkdy21", "seungyeoneeee", "Hansoo-mzc"]'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Pick Random Reviewer
        id: pick_random_reviewer 
        uses: actions/github-script@v6
        with:
          script: |
            const group1 = JSON.parse(process.env.GROUP1).filter(user => user !== context.payload.pull_request.user.login);
            const group2 = JSON.parse(process.env.GROUP2).filter(user => user !== context.payload.pull_request.user.login);
            console.log('group1:', group1, 'group2:', group2);
            
            const randomReviewer1 = group1[Math.floor(Math.random() * group1.length)];
            const randomReviewer2 = group2[Math.floor(Math.random() * group2.length)];
            console.log('randomReviewer1:', randomReviewer1, 'randomReviewer2:', randomReviewer2);

            core.setOutput('randomReviewer1', randomReviewer1);
            core.setOutput('randomReviewer2', randomReviewer2);

      - name: Add Comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üéâ @${{ steps.pick_random_reviewer.outputs.randomReviewer1 }} and @${{ steps.pick_random_reviewer.outputs.randomReviewer2 }} have been randomly selected as the reviewers! Please review. üôè`
            });
      
      - name: Add Reviewers
        id: add_reviewers
        uses: actions/github-script@v6
        with:
          script: |
            const addReviewersResponse = await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              reviewers: [`${{ steps.pick_random_reviewer.outputs.randomReviewer1 }}`, `${{ steps.pick_random_reviewer.outputs.randomReviewer2 }}`]
            });
            if (addReviewersResponse.status === 201) {
              core.setOutput('reviewers_added', 'true');
            }

      - name: Add Label
        if: steps.add_reviewers.outputs.reviewers_added == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['pending/review']
            });
            

      
      - name: Check if the PR author is an organization member and add as assignee
        uses: actions/github-script@v6
        with:
          script: |
            const prAuthor = context.payload.pull_request.user.login;
            const org = context.repo.owner;
            const prNumber = context.payload.pull_request.number;

            // Check if the PR author is a member of the organization
            try {
              await github.rest.orgs.checkMembershipForUser({
                org,
                username: prAuthor
              });

              // If the check doesn't throw an error, the user is a member
              // Add the PR author as an assignee
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                assignees: [prAuthor]
              });
            } catch (error) {
              // If the user is not a member, or any other error occurs, do nothing
              console.log(`User ${prAuthor} is not a member of the org, or an error occurred: ${error.message}`);
            }