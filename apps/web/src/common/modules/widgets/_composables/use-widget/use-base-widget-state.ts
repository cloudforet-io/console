import type { ComputedRef, Ref, UnwrapRef } from 'vue';
import {
    computed, reactive,
} from 'vue';

import type { DateRange } from '@/schema/dashboard/_types/dashboard-type';
import type {
    Granularity,
} from '@/schema/dashboard/_types/widget-type';


import { getWidgetConfig } from '@/common/modules/widgets/_helpers/widget-config-helper';
import type { NewWidgetProps } from '@/common/modules/widgets/types/widget-display-type';


/**
 * @description It returns states which is among the data generated by widget info and widget config through combination,
 * it's expected to be applicable universally across all widgets,
 * rather than being specifications that need to be defined or implemented differently for each widget.
 */
export interface BaseWidgetState {
    granularity: Ref<Granularity|undefined>;
    widgetName: string|Ref<string>; // widget config name
    title?: string|Ref<string|undefined>; // widget title from the dashboard widget layout info.
    dateRange: ComputedRef<DateRange|undefined>;
}

export function useBaseWidgetState(props: NewWidgetProps): UnwrapRef<BaseWidgetState> {
    const widgetConfig = getWidgetConfig(props.widgetName);

    const state = reactive<BaseWidgetState>({
        widgetName: computed<string>(() => props.widgetName),
        title: computed<string>(() => props.title ?? widgetConfig.meta?.title ?? ''),
        granularity: computed(() => widgetConfig.meta.granularity),
        dateRange: computed(() => props.dateRange),
    }) as UnwrapRef<BaseWidgetState>;

    return state;
}
